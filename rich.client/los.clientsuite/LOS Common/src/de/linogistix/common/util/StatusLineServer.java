/*
 * Copyright (c) 2006 - 2010 LinogistiX GmbH
 * 
 *  www.linogistix.com
 *  
 *  Project myWMS-LOS
 */
package de.linogistix.common.util;

import de.linogistix.common.res.CommonBundleResolver;
import de.linogistix.common.services.J2EEServiceLocator;
import de.linogistix.common.system.ServerDown;
import de.linogistix.common.userlogin.LoginService;
import de.linogistix.los.runtime.RuntimeServicesRemote;
import java.awt.Component;
import java.util.logging.Logger;
import org.openide.awt.StatusLineElementProvider;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author  trautm
 */
public class StatusLineServer extends javax.swing.JPanel implements StatusLineElementProvider{
  
  LoginService login;
  
  private static final Logger log = Logger.getLogger(StatusLineServer.class.getName());
  
  private static final String ICON_CONNECTED = "/de/linogistix/common/res/icon/network-idle.png";
  private static final String ICON_NOT_CONNECTED = "/de/linogistix/common/res/icon/network-error.png";
  
  private static final String ICON_LOGGEDIN = "/de/linogistix/common/res/icon/UserLogin.png";
  private static final String ICON_NOT_LOGGEDIN = "/de/linogistix/common/res/icon/Exception.png";
  
  private boolean connected;
  
  private ServerDown serverDown = new ServerDown();
  
  private String connectStr;
  
  /** Creates new form StatusLineServer */
  public StatusLineServer() {
    initComponents();
    loginLabel.setText(NbBundle.getMessage(CommonBundleResolver.class,"loggedOff"));
    J2EEServiceLocator j2ee = (J2EEServiceLocator)Lookup.getDefault().lookup(J2EEServiceLocator.class);
    this.connectStr = j2ee.getApplicationName() + "@" + j2ee.getHostName();
    
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginLabel = new javax.swing.JLabel();
        connectionLabel = new javax.swing.JLabel();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        loginLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/linogistix/common/res/icon/UserLogin.png"))); // NOI18N
        loginLabel.setText("loggedin");
        loginLabel.setToolTipText(loginLabel.getText());
        add(loginLabel);

        connectionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/linogistix/common/res/icon/network-idle.png"))); // NOI18N
        connectionLabel.setText("connected");
        connectionLabel.setToolTipText(getConnectStr());
        add(connectionLabel);
    }// </editor-fold>//GEN-END:initComponents
  
  public Component getStatusLineElement() {
    
    ConnectionTester connectionTester = new ConnectionTester(this);
    connectionTester.start();
    try{
      login = (LoginService)Lookup.getDefault().lookup(LoginService.class);
      loggedIn(login.validate());
    } catch(Throwable t){
      loggedIn(false);
    }
    
    return this;
  }
  
  public synchronized void loggedIn(boolean loggedIn){
    if (loggedIn){
      loginLabel.setText(NbBundle.getMessage(CommonBundleResolver.class,"loggedInAsUser") + login.getUser());
      loginLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(ICON_LOGGEDIN)));
    } else{
      loginLabel.setText(NbBundle.getMessage(CommonBundleResolver.class,"loggedOff"));
      loginLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(ICON_NOT_LOGGEDIN)));
    }
    invalidate();
    validate();
  }
  
  public boolean isConnected() {
      return connected;
  }
  
  public synchronized void connected(boolean connected){
    serverDown.processServerDown(connected);
   this.connected = connected;
   if (connected){
       String connectStr = NbBundle.getMessage(CommonBundleResolver.class,"connected");
       connectStr += ": ";
       connectStr += this.connectStr;
      connectionLabel.setText(connectStr);
      connectionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(ICON_CONNECTED)));
    } else{
      connectionLabel.setText(NbBundle.getMessage(CommonBundleResolver.class,"notConnected"));
      connectionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(ICON_NOT_CONNECTED)));
    }
    invalidate();
    validate();
  }
  
  public synchronized void connecting(){
    
    connectionLabel.setText(NbBundle.getMessage(CommonBundleResolver.class,"connecting"));
    
  }
  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel connectionLabel;
    private javax.swing.JLabel loginLabel;
    // End of variables declaration//GEN-END:variables

    public String getConnectStr() {
        return connectStr;
    }
    // End of variables declaration
  
  class ConnectionTester extends Thread{
    
    static final long POLL_INTERVALL = 10000L;
     static final long POLL_INTERVALL_SHORT = 1000L;
     
    StatusLineServer statusLine;

    
    ConnectionTester(StatusLineServer statusLine){
      this.statusLine = statusLine;            
    }
    
    public void run() {
      
      ConnectionTesterOberserver observer = null;
      long poll= POLL_INTERVALL;
      
      boolean interrupted = false;
      
      while(!(interrupted || isInterrupted())){
        try{
          poll = POLL_INTERVALL;
          observer = new  ConnectionTesterOberserver(this.statusLine);
          observer.start();
          J2EEServiceLocator loc = (J2EEServiceLocator)Lookup.getDefault().lookup(J2EEServiceLocator.class);
          RuntimeServicesRemote sc = (RuntimeServicesRemote)loc.getStateless(RuntimeServicesRemote.class);
          sc.ping();
          this.statusLine.connected(true);    
          observer.setOk();
        } catch (javax.ejb.EJBAccessException ex){
          //connected but not authentificated
            log.warning("Ping failed: " + ex.getMessage());
            this.statusLine.connected(true);    
          if (observer != null){
              observer.setOk();
          }
        } catch (Throwable t){
//          log.log(Level.SEVERE, t.getMessage());
//            t.printStackTrace();
            log.warning("Ping failed: " + t.getMessage());
          poll = POLL_INTERVALL_SHORT;
          this.statusLine.connected(false);
        } finally{
          try {
            synchronized(this){
              this.wait(poll);
            }
          } catch (InterruptedException ex) {
            interrupted = true;
          }
        }
      }
      
    }
  }
  
  class ConnectionTesterOberserver extends Thread{
    
    static final long LATENCY = 3000L;
    StatusLineServer statusLine;
    private Boolean ok = new Boolean(false);
    
    ConnectionTesterOberserver(StatusLineServer statusLine){
      this.statusLine = statusLine;
    }
    
    
    public void run() {
      
      try{
        synchronized(this){
          this.wait(LATENCY);
        }
        
        if (ok.booleanValue()){
          return;
        } else{
          this.statusLine.connected(false);
        }
      } catch (Exception ex){
        
      }
      
    }

    public Boolean getOk() {
      return ok;
    }

    public void setOk() {
      this.ok = new Boolean(true);
      synchronized(this){
        notify();
      }
    }
    
    
  }
  
}
