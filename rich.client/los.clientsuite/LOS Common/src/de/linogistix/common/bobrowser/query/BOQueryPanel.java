/*
 * Copyright (c) 2006 - 2010 LinogistiX GmbH
 * 
 *  www.linogistix.com
 *  
 *  Project myWMS-LOS
 */
package de.linogistix.common.bobrowser.query;

import de.linogistix.common.bobrowser.api.BOLookup;
import de.linogistix.common.bobrowser.bo.BO;
import de.linogistix.common.bobrowser.bo.BONode;
import de.linogistix.common.bobrowser.bo.editor.PropertiesComboBoxModel;
import de.linogistix.common.bobrowser.query.gui.component.BOQueryHeaderPanel;
import de.linogistix.common.util.CursorControl;
import de.linogistix.common.util.ExceptionAnnotator;
import de.linogistix.los.query.BODTO;
import de.linogistix.los.query.OrderByToken;
import de.linogistix.los.query.QueryDetail;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import org.mywms.model.BasicEntity;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node.Property;
import org.openide.nodes.NodeEvent;
import org.openide.nodes.NodeListener;
import org.openide.nodes.NodeMemberEvent;
import org.openide.nodes.NodeReorderEvent;
import org.openide.util.Lookup;

/**
 *
 * @author  trautm
 */
public class BOQueryPanel extends JPanel implements NodeListener, BOQueryEventListener, ExplorerManager.Provider {

    private static final Logger log = Logger.getLogger(BOQueryPanel.class.getName());
    private BOQueryNode boQueryNode;
    private BOQueryMasterDetailView mdView;
    private Class bundleResolver;
    private boolean editabelDetail;
    private BOQueryHeaderPanel headerPanel;
    private BONode boNode;
    private boolean initialized = false;
    private boolean showDetail = true;
    private BOQueryModel myModel = null;

    /** Creates new form BOQueryPanel */
    public BOQueryPanel(BONode node, boolean editabelDetail) {
        this.boNode = node;
        this.editabelDetail = editabelDetail;
        if (this.boNode != null) {
            init();
        }
    }

    public BOQueryPanel(BONode node, BOQueryModel model, boolean editabelDetail) {
        this.boNode = node;
        this.editabelDetail = editabelDetail;
        this.myModel = model;
        if (this.boNode != null) {
            init();
        }
    }

    boolean isInitialized() {
        return initialized;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        queryHeaderPanel = new javax.swing.JPanel();
        masterDetailView = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        queryHeaderPanel.setLayout(new java.awt.BorderLayout());
        add(queryHeaderPanel, java.awt.BorderLayout.NORTH);

        masterDetailView.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        masterDetailView.setLayout(new java.awt.BorderLayout());
        add(masterDetailView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel masterDetailView;
    private javax.swing.JPanel queryHeaderPanel;
    // End of variables declaration//GEN-END:variables

    public void init() {

        if (this.boNode == null) {
            throw new RuntimeException("Not yet initialized");
        }

        if (initialized) {
            log.warning("Try to initialize twice - Skip.");
            return;
        }

        CursorControl.showWaitCursor();

        try {
            ExplorerManager mgr = new ExplorerManager();

            this.bundleResolver = boNode.getBo().getBundleResolver();
            boNode.getBo().addBOQueryListener(this);

            if (myModel == null) {
                myModel = new BOQueryModel(boNode);
            }

            myModel.setManager(mgr);

            this.boQueryNode = new BOQueryNode(myModel, boNode.getBo().getDescriptor(), getBundleResolver());
            this.boQueryNode.addNodeListener(this);
            this.boQueryNode.getModel().getManager().addPropertyChangeListener(this);
            this.boQueryNode.getModel().getManager().setRootContext(this.boQueryNode);
            
            initComponents();
            initHeaderPanel();
            initMasterDetailView();
            initialized = true;

        } catch (Throwable t) {
            ExceptionAnnotator.annotate(t);
            throw new RuntimeException(t);

        } finally {
            // set normal cursor back
            CursorControl.showNormalCursor();
        }
    }

    public void toggleDetail() {
        if (showDetail) {
            mdView.removeEditButtons();
            showDetail = false;
        } else {
            if (this.editabelDetail && mdView.getEditButtons() == null) {
                mdView.addEditButtons();
            }
            showDetail = true;
        }
        getMasterDetailView().toggleDetail();

    }

    private void initHeaderPanel() {
        this.headerPanel = new BOQueryHeaderPanel(this, this.boQueryNode);
        queryHeaderPanel.add(this.headerPanel, BorderLayout.CENTER);
    }
    
    public void newLayout(){
        
        headerPanel.repaint();
        queryHeaderPanel.validate();
               
        SwingUtilities.invokeLater(new Runnable() {
                        
                        public void run() {                            
                            layoutMe();
                        }
                    });
    }

    public void layoutMe(){
        this.validate();
    }

    private void initMasterDetailView() {
        mdView = new BOQueryMasterDetailView(
                getExplorerManager(),
                this.boQueryNode.getModel().getBoNode(),
                getBundleResolver());

        if (this.editabelDetail) {
            mdView.addEditButtons();
        }

        masterDetailView.add(mdView, BorderLayout.CENTER);

    }

    private List<OrderByToken> getOrderByTokens() {
        Property p;
        OrderByToken t;
        PropertiesComboBoxModel.BOBeanPropertyEntry e;
        List<OrderByToken> ret = new ArrayList();
        String[] idProps = null;

        e = headerPanel.getBOBeanPropertyEntry();

        if (e.isDoNotSort()) {
            return null;
        }
        p = this.boQueryNode.getModel().getBoNode().
                getBoBeanNodeTemplate().
                getPropertySets()[e.getPropertySetIndex()].getProperties()[e.getPropertyIndex()];

        if (BasicEntity.class.isAssignableFrom(p.getValueType())) {
            String param = p.getName();
            BO bo;
            BOLookup l = (BOLookup) Lookup.getDefault().lookup(BOLookup.class);
            bo = (BO) l.lookup(p.getValueType());
            if (bo == null) {
                log.log(Level.SEVERE, "Cannot identify BO for type " + p.getValueType());
            } else {
                idProps = new String[]{bo.getQueryService().getUniqueNameProp()};
            }
            if (idProps != null && idProps.length > 0) {
                param = param.concat(".");
                param = param.concat(idProps[0]);
            }
            t = new OrderByToken(
                    param,
                    this.headerPanel.isSortAscending());
        } else if (Collection.class.isAssignableFrom(p.getValueType())) {
            t = new OrderByToken(
                    p.getName() + ".size",
                    this.headerPanel.isSortAscending());
        } else {
            t = new OrderByToken(
                    p.getName(),
                    this.headerPanel.isSortAscending());
        }

        ret.add(t);

        return ret;
    }

    public synchronized void reload() {

        if (this.boQueryNode.getModel().getProvider() == null) {
            log.warning("No Provider");
            return;
        }

        CursorControl.showWaitCursor();

        try {

            int startResultIndex = this.headerPanel.getStartResultIndex();
            int resultsPerPage = this.headerPanel.getResultsPerPage();

            if (this.boQueryNode.getModel().getQueryDetail() == null) {
                this.boQueryNode.getModel().setQueryDetail(
                        new QueryDetail(startResultIndex, resultsPerPage));
            }
            this.boQueryNode.getModel().getQueryDetail().setStartResultIndex(startResultIndex);
            this.boQueryNode.getModel().getQueryDetail().setMaxResults(resultsPerPage);
            this.boQueryNode.getModel().getQueryDetail().setOrderBy(getOrderByTokens());
            this.boQueryNode.update();
            this.headerPanel.updatePageInfo();
            this.mdView.refresh(); // deadlock???

        } catch (BOQueryNoResultException nex) {
            log.log(Level.SEVERE, nex.getMessage());
            log.log(Level.INFO, nex.getMessage(), nex);
            getExplorerManager().setRootContext(this.boQueryNode);
            ExceptionAnnotator.annotate(nex);
        } catch (Throwable t) {
            log.log(Level.SEVERE, t.getMessage(), t);
            ExceptionAnnotator.annotate(t);
        } finally {
            if (getMasterDetailView() != null) {
                getMasterDetailView().updateCounter(); // sometimes deadlock

            }
            CursorControl.showNormalCursor();
        }
    }

    protected void clear() {
        try {
            this.boQueryNode.update(new ArrayList<BODTO>());
        } catch (BOQueryNoResultException ex) {
            log.warning(ex.getMessage());
        }
    }

    public ExplorerManager getExplorerManager() {
        return this.boQueryNode.getModel().getManager();
    }

    public void childrenAdded(NodeMemberEvent ev) {
//    log.info(ev.toString());
//    if (getExplorerManager().getSelectedNodes() == null
//            || getExplorerManager().getSelectedNodes().length < 1){
//      getMasterDetailView().initSelected();
//    }
    }

    public void childrenRemoved(NodeMemberEvent ev) {
//    log.info(ev.toString());
//    getMasterDetailView().initSelected();
    }

    public void childrenReordered(NodeReorderEvent ev) {
//    log.info(ev.toString());
        //selectNode(myNode.getLastUpdated();
    }

    public void nodeDestroyed(NodeEvent ev) {
        //
    }

    public void propertyChange(PropertyChangeEvent evt) {
//    log.info(evt.toString());
    }

    protected Class getBundleResolver() {
        return bundleResolver;
    }

    public void outdated(BOQueryEvent ev) {
        reload();
    }

    public BOQueryMasterDetailView getMasterDetailView() {
        return mdView;
    }

    public BOQueryHeaderPanel getHeaderPanel() {
        return headerPanel;
    }

    public BONode getBoNode() {
        return boNode;
    }

    public void setBoNode(BONode boNode) {
        this.boNode = boNode;
    }

    public BOQueryNode getBOQueryNode() {
        return boQueryNode;
    }
   
}
