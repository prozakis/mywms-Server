/*
 * Copyright (c) 2006 - 2010 LinogistiX GmbH
 * 
 *  www.linogistix.com
 *  
 *  Project myWMS-LOS
 */
package de.linogistix.common.bobrowser.bo.editor;

import de.linogistix.common.bobrowser.api.BOLookup;
import de.linogistix.common.bobrowser.bo.BO;
import de.linogistix.common.bobrowser.bo.BONode;
import de.linogistix.common.bobrowser.query.BOQueryMasterDetailView;
import de.linogistix.common.bobrowser.query.BOQueryModel;
import de.linogistix.common.bobrowser.query.BOQueryNode;
import de.linogistix.common.res.CommonBundleResolver;
import de.linogistix.common.util.ExceptionAnnotator;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.util.Lookup;

/**
 *
 * @author  trautm
 */
public class BOCollectionEditorReadOnlyPanel extends javax.swing.JPanel implements ExplorerManager.Provider{
  
  private final static Logger log = Logger.getLogger(BOCollectionEditorPanel.class.getName());
  
  BOCollectionEditor editor;
  
  ExplorerManager em;
  
  BOLookup l;
  
  BONode boNode;
  
  BO bo;
  
  BOQueryMasterDetailView masterDetailView;
  
  /**
   * Creates new form BOCollectionEditorPanel
   */
  public BOCollectionEditorReadOnlyPanel(BOCollectionEditor editor) {
    this.editor = editor;
    this.em = new ExplorerManager();
    initComponents();
    initMasterDetailView();
    initHeader();
    
  }
  
  private void initMasterDetailView() {
    
    Node tmp;
    BOQueryNode queryNode;
    BOQueryModel queryModel;
    
    try {
      
      l = (BOLookup)Lookup.getDefault().lookup(BOLookup.class);
      bo = (BO)l.lookup(editor.getTypeHint());
      
      boNode = new BONode(bo);
      queryModel = new BOQueryModel(boNode);
      queryNode = new BOQueryNode(queryModel, bo.getDescriptor(),CommonBundleResolver.class, false);
      queryNode.update(new ArrayList(editor.getEntities()));
       
      masterDetailView = new BOQueryMasterDetailView(
              getExplorerManager(),
              boNode,
              bo.getBundleResolver());
      
      editorPanel.add(masterDetailView);
      
      getExplorerManager().setRootContext(queryNode); 
      getExplorerManager().setSelectedNodes(new Node[]{queryNode.getChildren().getNodes()[0]});
      masterDetailView.refresh();
      
    } catch (Throwable ex) {
      log.log(Level.SEVERE, ex.getMessage(),ex);
      ExceptionAnnotator.annotate(ex);
    }
  }
  
  protected void initHeader(){
    BOEditorHeader h = new BOEditorHeader(editor.getBOBeanNode());
    headerPanel.add(h);
  }
  
  
  public ExplorerManager getExplorerManager() {
    return this.em;
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    headerPanel = new javax.swing.JPanel();
    editorPanel = new javax.swing.JPanel();

    setLayout(new java.awt.BorderLayout());

    headerPanel.setLayout(new java.awt.BorderLayout());
    add(headerPanel, java.awt.BorderLayout.NORTH);

    editorPanel.setLayout(new java.awt.BorderLayout());
    add(editorPanel, java.awt.BorderLayout.CENTER);
  }// </editor-fold>//GEN-END:initComponents
   
   
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JPanel editorPanel;
  private javax.swing.JPanel headerPanel;
  // End of variables declaration//GEN-END:variables
  
  
}
