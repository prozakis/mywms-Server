/*
 * Copyright (c) 2006 - 2010 LinogistiX GmbH
 * 
 *  www.linogistix.com
 *  
 *  Project myWMS-LOS
 */
package de.linogistix.common.bobrowser.bo.editor;

import de.linogistix.common.bobrowser.bo.BONode;
import de.linogistix.common.bobrowser.query.BOQueryNode;
import de.linogistix.common.res.CommonBundleResolver;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JSplitPane;
import javax.swing.JTextArea;
import javax.swing.SwingConstants;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.propertysheet.PropertySheetView;
import org.openide.explorer.view.TreeTableView;
import org.openide.util.Lookup;
import org.openide.util.NbBundle;

/**
 *
 * @author  trautm
 */
public class BOMasterDetailView extends javax.swing.JPanel implements ExplorerManager.Provider, Lookup.Provider, VetoableChangeListener{
  
  private Logger log = Logger.getLogger(BOMasterDetailView.class.getName());
  
  ExplorerManager manager;
  
//  ListView masterView;
  
  TreeTableView tableView;
  
  PropertySheetView detailView;
  
  private JSplitPane detailSplitPane;
  
  private JTextArea detailCommentArea;
  
  Lookup lookup;
  
  Class bundleResolver;
  
  protected BONode boNode;

  boolean showDetail = true;
 
  protected Object semaphore = new Object();
  
  private int dividerLocation;
  
  /** Creates new form BOMasterDetailView
   *
   * @param manager if null, a new instance of ExplorerManager is created
   * @param  editableDetail if true, a row of buttons is presented to edit/remove/etc. the Object
   */
  public BOMasterDetailView(ExplorerManager manager, BONode boNode, Class bundleResolver) {

      
    this.bundleResolver = bundleResolver;
    this.boNode = boNode;
    if (manager != null){
      this.manager = manager;
    } else{
      this.manager = new ExplorerManager();
    }
    
    // some Actions
    ActionMap map = getActionMap();
//    map.put("refresh", refresh);
//    map.put("delete",ExplorerUtils.actionDelete(getExplorerManager(),false));
    InputMap keys = getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
//    keys.put(KeyStroke.getKeyStroke("DELETE"), "delete");
//    keys.put(KeyStroke.getKeyStroke(KeyEvent.VK_F5, 0), "refresh");
    lookup = ExplorerUtils.createLookup(this.manager, map);
    
    initComponents();
    countLabel.setText(null);
//    initMasterView();

    initMasterTableView();
    initDetailView();
    //jSplitPane1.setOneTouchExpandable(true);
 
    manager.addVetoableChangeListener(this);
  }
  
  public ExplorerManager getExplorerManager() {
    return manager;
  }
  
  public Lookup getLookup() {
    return lookup;
  }
  
  public PropertySheetView getDetailView(){
    return detailView;
  }
  
  public JScrollPane getMasterView(){
    return tableView;  
  }
  
  public JTextArea getDetailCommentArea() {
    return detailCommentArea;
  }

  // ...methods as before, but replace componentActivated and
  // componentDeactivated with e.g.:
  public void addNotify() {
    
    super.addNotify();
    ExplorerUtils.activateActions(manager, true);
    
  }
  
  public void removeNotify() {
    ExplorerUtils.activateActions(manager, false);
    super.removeNotify();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        masterPanel = new javax.swing.JPanel();
        masterFooterPanel = new javax.swing.JPanel();
        countLabel = new javax.swing.JLabel();
        detailPanel = createDetailPanel();

        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setResizeWeight(1.0);

        masterPanel.setLayout(new java.awt.BorderLayout());

        masterFooterPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        masterFooterPanel.setLayout(new java.awt.BorderLayout());

        countLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        countLabel.setText("null");
        masterFooterPanel.add(countLabel, java.awt.BorderLayout.CENTER);

        masterPanel.add(masterFooterPanel, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setLeftComponent(masterPanel);

        detailPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        detailPanel.setMaximumSize(new java.awt.Dimension(300, 2147483647));
        detailPanel.setLayout(new java.awt.BorderLayout());
        jSplitPane1.setRightComponent(detailPanel);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
  
//  private void initMasterView() {
//    masterView = new ListView();
//    masterPanel.add(masterView, BorderLayout.CENTER);
//    
//  }
  
  private void initMasterTableView() {
    tableView = new TreeTableView();
    tableView.setRootVisible(false);
    tableView.setProperties(boNode.getBo().getBoMasterNodeProperties());
    
//    JScrollPane scroll = new JScrollPane();
  //  scroll.getViewport().add(tableView);
//    masterPanel.add(scroll, BorderLayout.CENTER);
       masterPanel.add(tableView, BorderLayout.CENTER);
  }
  
  
  private void initDetailView() {  
      
    detailSplitPane = new JSplitPane();
    detailSplitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
    detailSplitPane.setResizeWeight(1);
    detailSplitPane.setBorder(null);
      
    detailView = new PropertySheetView();
    detailView.setPreferredSize(new Dimension(250,250));
    detailSplitPane.setTopComponent(detailView);
    
    JPanel detailCommentPanel = new JPanel();
    detailCommentPanel.setLayout(new GridBagLayout());
    
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.fill = GridBagConstraints.BOTH;
    gbc.anchor = GridBagConstraints.NORTHWEST;
    
    JSeparator commentSeparator = new JSeparator(SwingConstants.HORIZONTAL);
    detailCommentPanel.add(commentSeparator, gbc);
    
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.anchor = GridBagConstraints.NORTHWEST;
    gbc.insets = new Insets(5, 5, 0, 0);
    
    JLabel commentLabel = new JLabel();
    commentLabel.setText(NbBundle.getMessage(CommonBundleResolver.class,"Comment"));
    commentLabel.setFont(commentLabel.getFont().deriveFont(Font.BOLD));
    
    detailCommentPanel.add(commentLabel, gbc);
    
    detailCommentArea = new JTextArea();
    detailCommentArea.setEnabled(false);
    detailCommentArea.setBackground(Color.WHITE);
    detailCommentArea.setDisabledTextColor(Color.BLACK);
    detailCommentArea.setLineWrap(true);
    detailCommentArea.setWrapStyleWord(true);
    detailCommentArea.setMargin(new Insets(5, 5, 5, 5));
    
    gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.weighty = 1;
    gbc.weightx = 1;
    gbc.fill = GridBagConstraints.BOTH;
    gbc.anchor = GridBagConstraints.NORTHWEST;
    gbc.insets = new Insets(5, 5, 5, 5);
    
    detailCommentPanel.add(detailCommentArea, gbc);
    
    detailCommentPanel.setMinimumSize(new Dimension(250,100));
    
    detailSplitPane.setBottomComponent(detailCommentPanel);
    
    detailPanel.add(detailSplitPane, BorderLayout.CENTER);
  }
  
  public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {  
      
      System.out.println("----- Master Detail Vetoable Change -----");
  }
  
  public void updateCounter(){
  
      synchronized(semaphore){
//        int count = getExplorerManager().getRootContext().getChildren().getNodesCount();
//        this.countLabel.setText("" + count + " " + NbBundle.getMessage(BundleResolver.class,"entryCount"));
          if (getExplorerManager().getRootContext() instanceof BOQueryNode) {
              BOQueryNode myNode = (BOQueryNode) getExplorerManager().getRootContext();
              //log.info("!!! Manager " + getExplorerManager().hashCode() );
              if (myNode.getModel().getResultSetSize() != myNode.getChildren().getNodes().length) log.log(Level.INFO, "Assertion failure: " + myNode.getModel().getResultSetSize() + " != " + myNode.getChildren().getNodes().length);
              this.countLabel.setText(NbBundle.getMessage(CommonBundleResolver.class, "RESULT_TOTAL_SIZE", myNode.getModel().getResultSetSize()));
          } else {
              this.countLabel.setText("-");
          }
              
      }
  }
    
//  public void initSelected(){
//    Node[] explored;
//    Node[] selected;
//    
//    try{
//      
//      selected = getExplorerManager().getSelectedNodes();
//      BOQueryNode queryNode = (BOQueryNode)getExplorerManager().getRootContext();
//      explored = queryNode.getChildren().getNodes();
//      
//      if ((selected == null || selected.length == 0)
//        && (explored == null || explored.length == 0))
//      {
//        getExplorerManager().setSelectedNodes(new Node[0]);
//      }
//      
//      if ((explored == null || explored.length == 0) 
//        && (selected != null && selected.length > 0))
//      {
//        getExplorerManager().setSelectedNodes(new Node[0]);
//      }
//      
//      if ((selected == null || selected.length == 0) 
//        && (explored != null && explored.length > 0))
//      {
////        if ( getExplorerManager().getExploredContext() == null){
////          getExplorerManager().setRootContext(queryNode);
////        }
//        getExplorerManager().setSelectedNodes(new Node[0]);
//      }
//    } catch (Throwable ex) {
//      log.log(Level.SEVERE, ex.getMessage(), ex);
//    }
//  }
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countLabel;
    private javax.swing.JPanel detailPanel;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JPanel masterFooterPanel;
    private javax.swing.JPanel masterPanel;
    // End of variables declaration//GEN-END:variables
  
  protected JPanel createDetailPanel(){
   JPanel detail = new JPanel();
   return detail;
  }
  
  public JPanel getDetailPanel() {
    return detailPanel;
  }
  
  public void toggleDetail(){
      if (showDetail){
          detailPanel.removeAll();
          
        // Uncomment following line to hide right pane.
          dividerLocation = jSplitPane1.getDividerLocation();
          jSplitPane1.setDividerLocation(10000);
        showDetail = false;
      } else{
          initDetailView();
          jSplitPane1.setDividerLocation(dividerLocation);
          showDetail = true;
      }
      
      invalidate();
      validate();
      updateUI();
      
      detailSplitPane.setDividerLocation(0.75);
  }
  
  
}
