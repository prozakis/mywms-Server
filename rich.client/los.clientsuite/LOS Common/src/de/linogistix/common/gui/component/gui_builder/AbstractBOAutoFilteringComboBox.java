/*
 * Copyright (c) 2006 - 2010 LinogistiX GmbH
 * 
 *  www.linogistix.com
 *  
 *  Project myWMS-LOS
 */
package de.linogistix.common.gui.component.gui_builder;

import de.linogistix.common.gui.component.controls.AutoFilteringComboBox;
import de.linogistix.common.gui.component.controls.LosLabel;
import de.linogistix.common.res.CommonBundleResolver;
import java.awt.Dimension;
import java.awt.event.ActionEvent;

/**
 *
 * @author  trautm
 */
public abstract class AbstractBOAutoFilteringComboBox extends javax.swing.JPanel {

    /** Creates new form AbstractBOEditor */
    public AbstractBOAutoFilteringComboBox() {
        initComponents();
     
        openChooserButton.setFocusable(false);
        openChooserButton.setText(org.openide.util.NbBundle.getMessage(CommonBundleResolver.class, "AbstractBOAutoFilteringComboBox.openChooserButton.text")); // NOI18N
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        editorLabel = new LosLabel();
        autoFilteringComboBox = new AutoFilteringComboBox();
        openChooserButton = new javax.swing.JButton();

        setMinimumSize(new java.awt.Dimension(200, 37));
        setLayout(new java.awt.GridBagLayout());

        editorLabel.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(editorLabel, gridBagConstraints);

        autoFilteringComboBox.setMaximumSize(new java.awt.Dimension(150, 22));
        autoFilteringComboBox.setMinimumSize(new java.awt.Dimension(150, 22));
        autoFilteringComboBox.setPreferredSize(new java.awt.Dimension(150, 22));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(autoFilteringComboBox, gridBagConstraints);

        openChooserButton.setText("hhhh"); // NOI18N
        openChooserButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        openChooserButton.setMaximumSize(new java.awt.Dimension(24, 22));
        openChooserButton.setMinimumSize(new java.awt.Dimension(24, 22));
        openChooserButton.setPreferredSize(new java.awt.Dimension(24, 22));
        openChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openChooserButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(openChooserButton, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

private void openChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openChooserButtonActionPerformed
    openChooserButtonActionPerformedListener(evt);
}//GEN-LAST:event_openChooserButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JComboBox autoFilteringComboBox;
    private javax.swing.JLabel editorLabel;
    private javax.swing.JButton openChooserButton;
    // End of variables declaration//GEN-END:variables

    public AutoFilteringComboBox getAutoFilteringComboBox(){
        return (AutoFilteringComboBox) autoFilteringComboBox;
    }
    
    public LosLabel getEditorLabel(){
        return (LosLabel) editorLabel;
    }

    public abstract void openChooserButtonActionPerformedListener(ActionEvent evt);

    @Override
    public Dimension getMinimumSize() {
        return super.getMinimumSize();
    }

    @Override
    public Dimension getMaximumSize() {
        return super.getMaximumSize();
    }

    @Override
    public Dimension getPreferredSize() {
        return super.getPreferredSize();
    }

    public javax.swing.JButton getOpenChooserButton() {
        return openChooserButton;
    }
    
    @Override
    public void setEnabled(boolean enabled) {
        autoFilteringComboBox.setEnabled(enabled);
        openChooserButton.setEnabled(enabled);
    }
    
    public void setEditable(boolean editable){
        autoFilteringComboBox.setEditable(editable);
        openChooserButton.setEnabled(editable);
    }
    
    public boolean isEditable(){
        return autoFilteringComboBox.isEditable() && openChooserButton.isEnabled();
    }
 
    public boolean isMandatory() {
        return getAutoFilteringComboBox().isMandatory();
    }

    public void setMandatory(boolean mandatory) {
        getAutoFilteringComboBox().getEditorLabel().setShowMandatoryFlag(mandatory);
        getAutoFilteringComboBox().setMandatory(mandatory);
    }
    
    public boolean isSuppressWarnings() {
        return getAutoFilteringComboBox().isSuppressWarnings();
    }

    public void setSuppressWarnings(boolean suppressWarnings) {
        getAutoFilteringComboBox().setSuppressWarnings(suppressWarnings);
    }
    
    public boolean checkSanity(){
        return getAutoFilteringComboBox().checkSanity();
    }
    
    public void setSelectedIndex(int index){
        autoFilteringComboBox.setSelectedIndex(index);
    }

    @Override
    public void requestFocus() {
        autoFilteringComboBox.requestFocus();
    }
    
    
}
